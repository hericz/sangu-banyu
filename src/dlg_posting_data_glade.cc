// generated 2008/8/9 9:11:45 WIT by herry@LancarJaya.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/herry/Monita/src/dlg_posting_data.glade
// for gtk 2.12.9 and gtkmm 2.12.5
//
// Please modify the corresponding derived classes in .//dlg_posting_data.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "dlg_posting_data_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/image.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/alignment.h>
#include <gtkmm/frame.h>

dlg_posting_data_glade::dlg_posting_data_glade(
)
{  
   
   Gtk::Dialog *dlg_posting_data = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Button *cancelbutton1 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   Gtk::Button *okbutton1 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
   tree_posting = Gtk::manage(new class Gtk::TreeView());
   
   Gtk::ScrolledWindow *scrolledwindow1 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Image *image1 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label(_("_Tambah"), true));
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment2 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button_tambah = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image2 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-clear"), Gtk::IconSize(4)));
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label(_("_Hapus"), true));
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment3 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button_hapus = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-edit"), Gtk::IconSize(4)));
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label(_("_Edit"), true));
   Gtk::HBox *hbox4 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment4 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *button_edit = Gtk::manage(new class Gtk::Button());
   Gtk::VButtonBox *vbuttonbox1 = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 10));
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Alignment *alignment1 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 1, 1));
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label(_("Posting Data")));
   Gtk::Frame *frame1 = Gtk::manage(new class Gtk::Frame());
   cancelbutton1->set_flags(Gtk::CAN_FOCUS);
   cancelbutton1->set_flags(Gtk::CAN_DEFAULT);
   cancelbutton1->set_relief(Gtk::RELIEF_NORMAL);
   okbutton1->set_flags(Gtk::CAN_FOCUS);
   okbutton1->set_flags(Gtk::CAN_DEFAULT);
   okbutton1->set_relief(Gtk::RELIEF_NORMAL);
   dlg_posting_data->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
   tree_posting->set_flags(Gtk::CAN_FOCUS);
   tree_posting->set_headers_visible(true);
   tree_posting->set_rules_hint(false);
   tree_posting->set_reorderable(false);
   tree_posting->set_enable_search(true);
   scrolledwindow1->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow1->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow1->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow1->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow1->add(*tree_posting);
   image1->set_alignment(0.5,0.5);
   image1->set_padding(0,0);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(false);
   label2->set_selectable(false);
   hbox2->pack_start(*image1, Gtk::PACK_SHRINK, 0);
   hbox2->pack_start(*label2, Gtk::PACK_SHRINK, 0);
   alignment2->add(*hbox2);
   button_tambah->set_flags(Gtk::CAN_FOCUS);
   button_tambah->set_flags(Gtk::CAN_DEFAULT);
   button_tambah->set_relief(Gtk::RELIEF_NORMAL);
   button_tambah->add(*alignment2);
   image2->set_alignment(0.5,0.5);
   image2->set_padding(0,0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   hbox3->pack_start(*image2, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   alignment3->add(*hbox3);
   button_hapus->set_flags(Gtk::CAN_FOCUS);
   button_hapus->set_flags(Gtk::CAN_DEFAULT);
   button_hapus->set_relief(Gtk::RELIEF_NORMAL);
   button_hapus->add(*alignment3);
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   label4->set_selectable(false);
   hbox4->pack_start(*image3, Gtk::PACK_SHRINK, 0);
   hbox4->pack_start(*label4, Gtk::PACK_SHRINK, 0);
   alignment4->add(*hbox4);
   button_edit->set_flags(Gtk::CAN_FOCUS);
   button_edit->set_flags(Gtk::CAN_DEFAULT);
   button_edit->set_relief(Gtk::RELIEF_NORMAL);
   button_edit->add(*alignment4);
   vbuttonbox1->pack_start(*button_tambah);
   vbuttonbox1->pack_start(*button_hapus);
   vbuttonbox1->pack_start(*button_edit);
   hbox1->pack_start(*scrolledwindow1);
   hbox1->pack_start(*vbuttonbox1, Gtk::PACK_SHRINK, 10);
   alignment1->add(*hbox1);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(true);
   label1->set_selectable(false);
   frame1->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame1->set_label_align(0,0.5);
   frame1->add(*alignment1);
   frame1->set_label_widget(*label1);
   dlg_posting_data->get_vbox()->set_homogeneous(false);
   dlg_posting_data->get_vbox()->set_spacing(0);
   dlg_posting_data->get_vbox()->pack_start(*frame1);
   dlg_posting_data->set_title(_("Posting Data"));
   dlg_posting_data->set_default_size(600,500);
   dlg_posting_data->set_modal(true);
   dlg_posting_data->property_window_position().set_value(Gtk::WIN_POS_NONE);
   dlg_posting_data->set_resizable(true);
   dlg_posting_data->property_destroy_with_parent().set_value(false);
   dlg_posting_data->set_has_separator(true);
   dlg_posting_data->add_action_widget(*cancelbutton1, -6);
   dlg_posting_data->add_action_widget(*okbutton1, -5);
   cancelbutton1->show();
   okbutton1->show();
   tree_posting->show();
   scrolledwindow1->show();
   image1->show();
   label2->show();
   hbox2->show();
   alignment2->show();
   button_tambah->show();
   image2->show();
   label3->show();
   hbox3->show();
   alignment3->show();
   button_hapus->show();
   image3->show();
   label4->show();
   hbox4->show();
   alignment4->show();
   button_edit->show();
   vbuttonbox1->show();
   hbox1->show();
   alignment1->show();
   label1->show();
   frame1->show();
   dlg_posting_data->show();
   button_tambah->signal_clicked().connect(SigC::slot(*this, &dlg_posting_data_glade::on_button_tambah_clicked), false);
   button_hapus->signal_clicked().connect(SigC::slot(*this, &dlg_posting_data_glade::on_button_hapus_clicked), false);
   button_edit->signal_clicked().connect(SigC::slot(*this, &dlg_posting_data_glade::on_button_edit_clicked), false);
}

dlg_posting_data_glade::~dlg_posting_data_glade()
{  delete gmm_data;
}
